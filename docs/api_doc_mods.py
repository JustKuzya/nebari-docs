from copy import deepcopy
from pathlib import Path

import click


def insert_lines(source_list: list, idx: int, lines: list) -> None:
    """Inject a list of lines at a given index"""
    lines_r = deepcopy(lines)
    lines_r.reverse()
    [source_list.insert(idx, line) for line in lines_r]


def modify_autogen_api_docs(autogen_path: Path, outpath: Path) -> None:
    """Modifications to the auto-generated API docs in order to make them
    presentable.

    Args:
        autogen_path (Path): path to the autogenerated API docs (*.md)
        outpath (Path): output path for the modified docs (*.md)
    """

    with open(autogen_path) as f:
        text = f.readlines()

    header_info = [
        "---\n",
        "title: API Documentation\n",
        "description: Reference to API docs\n",
        "---\n",
        "# API Documentation\n",
        "## Table of Contents\n",
    ]

    # remove Table of contents header
    del text[0]

    # insert new header
    insert_lines(text, 0, header_info)

    # fix header flags (otherwise page nav won't work)
    for idx, line in enumerate(text):
        if line[0:7] == "# qhub.":
            text[idx] = "##" + line
        elif line == "# qhub\n":
            text[idx] = "## qhub\n"

    keep_docs = [
        '"qhub.qhub.initialize',
        '"qhub.qhub.cli.deploy',
        '"qhub.qhub.cli.destroy',
        '"qhub.qhub.cli.initialize',
        '"qhub.qhub.cli.render',
        '"qhub.qhub.cli.support',
        '"qhub.qhub.cli',
        '"qhub.qhub.cli.upgrade',
        '"qhub.qhub.cli.validate',
        '"qhub.qhub.render',
        '"qhub.qhub.destroy',
    ]

    id_idx = []
    keep_idx = []
    for idx, line in enumerate(text):
        if line.startswith("<a"):
            id_idx.append(idx)
        # if snippet in line for snippet in keep_docs:
        [keep_idx.append(idx) for snippet in keep_docs if snippet in line]
    header_list = deepcopy(text[0:id_idx[0]])  # fmt: skip
    clean_list = []
    for idx, line in enumerate(header_list):
        if line.strip(" ").startswith("*"):
            # if snippet in line for snippet in keep_docs:
            [clean_list.append(idx) for snippet in keep_docs if snippet in line]
        else:
            clean_list.append(line)

    offset_idx = []
    for kidx in keep_idx:
        offset_idx.append(id_idx[id_idx.index(kidx) + 1])

    all_headers = zip(keep_idx, offset_idx)
    map = dict(zip(keep_idx, all_headers))

    # for idx in keep_idx:
    for idx, group in map.items():
        clean_list.extend(text[slice(*group)])

    with open(outpath, "w") as f:
        f.writelines(clean_list)


@click.command()
@click.option(
    "--autogen_path",
    default="docs/api_tmp.md",
    help="path to the autogenerated API docs (*.md)",
)
@click.option(
    "--outpath",
    default="docs/docs/references/api_docs.md",
    help="output path for the modified docs (*.md)",
)
def cli_modify_autogen_api_docs(autogen_path, outpath):
    modify_autogen_api_docs(autogen_path, outpath)


if __name__ == "__main__":
    cli_modify_autogen_api_docs()
